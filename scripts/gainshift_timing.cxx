//Written by:  B. Olaizola 2017-06-12

//Experiment: S1607

//Root version: 6.08/02

//GRSIsort version: 2.4.00

//This script will take a root file that contains TAC histograms for all the posible LaBr-LaBr combination (like the ones generated by the LaBr-timing script), fit them to Gaussian and produce a text file with all the centroids. This will help with the timing gainmatiching of the TACs.

//To compile:
//Note: GRSISort looks for .cxx extensions when compiling (for example it looks in the /myAnalysis and /scripts directories)

#include <fstream>
#include <iostream>
using namespace std;

#include "TFile.h"
#include "TH1F.h"
#include "TF1.h"
#include "TMath.h"

using namespace std;

//Gaussian function
  Double_t gauss(Double_t *t, Double_t *par)
  {
    Double_t fillval ;
    fillval = par[0] * (TMath::Exp(-1/2*pow((t[0]-par[1])/par[2],2)));
    return fillval;
  }

//main program
int main ( int argc, char *argv[] )
{

  //Definitions:
  const char* datafile_path;
  double_t gainmatch[8][8];
  double fit_min=0.;
  double fit_max=50000.;
  //Get Histogram from rootfile
  TH1D *histo;
  //fitting func
  TF1 *fitfunc;


  if ( argc != 2 ){ // argc should be 2 for correct execution
    // We print argv[0] assuming it is the program name
    cout<<"usage: "<< argv[0] <<" <filename>\n";
    datafile_path = argv[1];
  }
  else {
    datafile_path = argv[1];
    //std::string datafile = argv[1];
    printf("Reading datafile: %s\n",datafile_path);
  }

  TFile *datafile = TFile::Open(datafile_path);

  fitfunc = new TF1("fitfunc",gauss,fit_min,fit_max,3);//edit number of parameters (last number)

  datafile->cd();  
  for(int i = 0; i < 8; ++i){
    for(int j = i+1; j < 8; ++j){
      histo = (TH1D*)datafile->Get(Form("TAC_gated_%d_%d",i,j));
      histo->Rebin(10);//10 ps/chan is more reasonable
      //Fitting parameters
      fit_min=histo->GetMean()-3*histo->GetRMS();
      fit_max=histo->GetMean()+3*histo->GetRMS();
      fitfunc->SetParameters(50,histo->GetMean(),histo->GetRMS());
      //fitting paramenters-end
      histo->Fit("fitfunc","LLRQ","",fit_min,fit_max);
      gainmatch[i][j] = fitfunc->GetParameter(1);
      //This checks if the result is a number (if we do not have a LaBr, one of the TAC combinations will be missed and there will be no histogram)
      if (gainmatch[i][j] != gainmatch[i][j]){//This is based that the compiler should not considered a NaN a number, so it isn't equalt to any float, including itself.
		gainmatch[i][j]=25000.;
	}
      //Printing to screen the useful information
      std::cout<<"   TAC_offset["<<i<<"]["<<j<<"] = (25000-"<<setprecision(7)<<gainmatch[i][j]<<");"<<std::endl;
    }
  }
}
